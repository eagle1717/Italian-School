{"remainingRequest":"C:\\Users\\tamer\\Desktop\\MAIN\\studiait-front-old\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\tamer\\Desktop\\MAIN\\studiait-front-old\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\tamer\\Desktop\\MAIN\\studiait-front-old\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\tamer\\Desktop\\MAIN\\studiait-front-old\\src\\components\\Modals\\CertificateModal.vue?vue&type=template&id=2b621d7f&","dependencies":[{"path":"C:\\Users\\tamer\\Desktop\\MAIN\\studiait-front-old\\src\\components\\Modals\\CertificateModal.vue","mtime":1625895132296},{"path":"C:\\Users\\tamer\\Desktop\\MAIN\\studiait-front-old\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\tamer\\Desktop\\MAIN\\studiait-front-old\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\tamer\\Desktop\\MAIN\\studiait-front-old\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\tamer\\Desktop\\MAIN\\studiait-front-old\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}